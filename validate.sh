#!/bin/bash

mas() {
read -p "If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt and press 2 " options
if (($options == 1)); then
read -p "Enter ip address: " IP
curl -k --head  https://{$IP}:443 -L
elif (($options == 2 )); then
while read domm; 
do 
echo $domm
sleep 1; echo  $( curl -k --silent --head  --fail $domm -L |grep "Server:\|You don't have permission to access"); 
done < ip.txt | tee ot.txt
else
printf "\e[1;93m [!] Invalid option!\e[0m\n"
menu
fi
}
jira()
{
   read -p "If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt and press 2 " option
   if [[ $option == 1 ]]; then
   read -p "Enter ip address: " IP
   curl -k https://{$IP}:443 -L | grep jira
   elif [[ $option == 2 ]]; then
   while read domm;
   do 
   echo $domm 
   sleep 1; 
    echo $( curl -k $domm -L |grep "jira\|You don't have permission to access"); done < ip.txt | tee ot.txt
    else
    printf "\e[1;93m [!] Invalid option!\e[0m\n"
    menu
    fi
}
java()
{
   read -p "If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt and press 2 " option
   if [[ $option == 1 ]]; then
   read -p "Enter ip address: " IP
   curl -k https://{$IP}:443 -L | grep java
   elif [[ $option == 2 ]]; then
   while read domm;
   do 
   echo $domm 
   sleep 1; 
    echo $( curl -k $domm -L |grep "jquery\|You don't have permission to access"); done < ip.txt | tee ot.txt
    else
    printf "\e[1;93m [!] Invalid option!\e[0m\n"
    menu
    fi
}

ntp() {
   read -p "If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as url.txt and press 2 " option
   if [[ $option == 1 ]]; then
   read -p "Enter ip address: " IP
   read -p "Enter ip PORT: " PORT
   echo $IP
   sudo nmap --script ntp-info $IP  -p $port -sU  | grep version:
    elif [[ $option == 2 ]]; then
     while read domm;
    do
    echo $domm
     sleep 1; 
    echo $( sudo nmap --script ntp-info -p 123 -sU -Pn $domm | "grep version:"); done < ip.txt | tee ot.txt
    else
    printf "\e[1;93m [!] Invalid option!\e[0m\n"
    menu
    fi
}

   unp() {
   read -p "Enter ip address: " IP
   read -p "Enter ip PORT: " PORT
   read -p "Enter ip scan type tcp(sT)Udp(sU): " t
   echo $IP
   echo $PORT
   sudo nmap -$t -p $PORT -Pn $IP
   }

     ss() {
   
   printf" If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt press 2"
   read -p "Enter  Option: " option
   if [[ $option == 1 ]]; then
   read -p "Enter ip address: " IP
   read -p "Enter ip PORT: " PORT
   echo $IP
   echo $PORT
   nmap -Pn --script ssl-enum-ciphers -p$PORT -sV $IP
   elif [[ $option == 2 ]]; then
     while read domm;
    do 
    echo $domm
    sleep 1; 
     echo $( nmap -Pn --script ssl-enum-ciphers -sV $domm | grep "64-bit\|16-bit\|32-bit") ; 
    done < ip.txt | tee ot.txt
    else
printf "\e[1;93m [!] Invalid option!\e[0m\n"
menu

fi
}
   ssl() {
   printf" If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt press 2"
   read -p "Enter  option: " option
   if [[ $option == 1 ]]; then
   read -p "Enter ip address: " IP
   read -p "Enter ip PORT: " PORT
   echo $IP
   echo $PORT
   nmap -Pn --script ssl-enum-ciphers -p$PORT -sV $IP
   elif [[ $option == 2 ]]; then
     while read domm;
    do 
    echo $domm
    sleep 1; 
     echo $( nmap -Pn --script ssl-enum-ciphers -sV $domm ) ; done< ip.txt | tee ot.txt
    else
printf "\e[1;93m [!] Invalid option!\e[0m\n"
menu

fi

   }

   sslcert() { 
   printf" If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt press 2"
   read -p "Enter ip option: " option
   if [[ $option == 1 ]]; then
   read -p "Enter ip address: " IP
   read -p "Enter ip PORT: " PORT
   echo $IP
   echo $PORT
   nmap -Pn --script ssl-cert -p$PORT -sV $IP
   elif [[ $option == 2 ]]; then
     while read domm;
    do 
    echo $domm
    sleep 1; 
     echo $( nmap -Pn --script ssl-cert -sV $domm ) ; 
    done < ip.txt | tee ot.txt
    else
printf "\e[1;93m [!] Invalid option!\e[0m\n"
menu

fi
}

   unss() {
   printf" If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt press 2"
   read -p "Enter option: " option
   if [[ $option == 1 ]]; then
   read -p "Enter ip address: " IP
   read -p "Enter ip PORT: " PORT
   echo $IP 
   echo $PORT
   nmap --script ssl-cert  -sV -p$PORT -Pn $IP
   elif [[ $option == 2 ]]; then
     while read domm;
    do 
    echo $domm
    sleep 1; 
    echo $( nmap -Pn --script ssl-enum-ciphers -sV $domm ); 
    done < ip.txt | tee ot.txt
    else
    printf "\e[1;93m [!] Invalid option!\e[0m\n"
    menu
    fi
}

  op() {
   printf" If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt press 2 for option 2 format should be http://IP:port"
   read -p "Enter option: " option
   if [[ $option == 1 ]]; then
   read -p "Enter ip address: " IP
   read -p "Enter ip PORT: " PORT
   echo $IP
   echo $PORT
   curl -i -X OPTIONS http://$IP:$PORT --insecure
   elif [[ $option == 2 ]]; then
   while read domm;
    do 
    echo $domm
    sleep 1; 
    echo $( curl -i -X OPTIONS $domm --insecure); 
    done < ip.txt | tee ot.txt
    else
    printf "\e[1;93m [!] Invalid option!\e[0m\n"
    menu
    fi
   }
TR() {
   printf" If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt press 2 for option 2 format should be http://IP:port"
   read -p "Enter option: " option
   if [[ $option == 1 ]]; then
   read -p "Enter ip address: " IP
   read -p "Enter ip PORT: " PORT
    echo $IP
    echo $PORT
    curl -i -X TRACE http://$IP:$PORT --insecure
    elif [[ $option == 2 ]]; then 
    while read domm;
    do 
    echo $domm
    sleep 1; 
    echo $( curl -i -X TRACE $domm --insecure); 
    done < ip.txt | tee ot.txt
    else
    printf "\e[1;93m [!] Invalid option!\e[0m\n"
    menu
    fi
    }
   DSC()
    {
   printf" If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt press 2"
   read -p "Enter option: " option
   if [[ $option == 1 ]]; then
   read -p "Enter ip address: " IP
   read -p "Enter ip PORT: " PORT
   echo $IP
   echo $PORT 
   nmap --script ssh2-enum-algos  -sV -p$port -Pn $IP
   elif [[ $option == 2 ]]; then
     while read domm;
    do 
    echo $domm
    sleep 1; 
    echo $( nmap -Pn --script ssh2-enum-algos  -sV -p 21 -Pn $domm ); 
    done < ip.txt | tee ot.txt
    else
    printf "\e[1;93m [!] Invalid option!\e[0m\n"
    menu
    fi
}

ciso() {

   printf" If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt press 2"
   read -p "Enter ip option: " option
   if [[ $option == 1 ]]; then
    read -p "Enter ip address: " IP
     echo $IP
     nmap -p 23 -Pn $IP
   elif [[ $option == 2 ]]; then
     while read domm;
    do 
    echo $domm
    sleep 1; 
     echo $(nmap -p 23 -Pn $domm |grep "open\|closed\|filtered"); 
    done < ip.txt | tee ot.txt
    else
    printf "\e[1;93m [!] Invalid option!\e[0m\n"
menu

fi
printf "Consider as fp if port is found closed"
   }

smp() {
   printf" If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt press 2"
   read -p "Enter ip option: " option
   if [[ $option == 1 ]]; then
    read -p "Enter ip address: " IP
     echo $IP
     nmap -p 23 -Pn $IP
   elif [[ $option == 2 ]]; then
     while read domm; do
     echo $domm
    sleep 1;   
     echo $(sudo nmap -sU -p 161,162 -Pn $domm -n | grep "open|filtered\|open\|closed"); done < ip.txt | tee ot.txt
    else
    printf "\e[1;93m [!] Invalid option!\e[0m\n"
menu

fi
  

printf "Consider as fp if port is found closed"
   }

ISC() {
   printf" If you want to scan single IP press 1 \n If you want to scan multiple IPs create file named as ip.txt press 2"
   read -p "Enter ip option: " option
   if [[ $option == 1 ]]; then
    read -p "Enter ip address: " IP
     echo $IP
    nslookup -q=txt -class=CHAOS version.bind $IP
   elif [[ $option == 2 ]]; then
     while read domm; do
     echo $domm
    sleep 1;   
     echo $(nslookup -q=txt -class=CHAOS version.bind $domm); done < ip.txt | tee ot.txt
    else
    printf "\e[1;93m [!] Invalid option!\e[0m\n"
menu

fi
  
printf "Kindly check the version"
   }



printf "
                                       
                                                                                                            
\n"
printf "Please Select the vulnerability option 1,2,3\n"
printf "1.Microsoft IIS iisadmpwd Web Directory Present Vulnerability\n"
printf "2.EOL/Obsolete Software: Nginx 1.16.x Detected\n"
printf "3.Unaothrized port detected\n"
printf "4.Cisco IOS and IOS XE Software Cluster Management Protocol Remote Code Execution Vulnerability (cisco-sa-20170317-cmp)\n"
printf "5.SSL v3 / TLS 1.0/1.1 is enabled or To check vulnerable Ciphers.\n"
printf "6.NTP information leakage\n"
printf "7.Untrusted SSL Certificate\n"
printf "8.Options Method enabled\n"
printf "9.TRACE Method enabled\n"
printf "10.Depreciated SSH Ciphers\n"
printf "11.EOL/Obsolete Software: jQuery 1.x and 2.x Detected\n"
printf "12.Birthday attacks against TLS ciphers with 64bit block size vulnerability (Sweet32)\n"
printf "13.SSL Server Supports Weak Encryption Vulnerability"
printf "14.Network Time Protocol Multiple Security Vulnerabilities (ntp-4.2.8p14),(ntp-4.2.8p7),(ntp-4.2.8p6),(ntp-4.2.8p5)(ntp-4.2.8p7)\n"
printf "15.Atlassian Jira Server Private Project Names Enumeration Vulnerability (JRASERVER-72915)&(JRASERVER-72916)"
printf "16.ISC BIND Assertion Failure Vulnerability\n"
printf "17.ISC BIND Buffer Overflow Vulnerability\n"
printf "18.ISC BIND NXNSAttack Vulnerability\n"
printf "19.NTP.org ntpd Multiple Security Vulnerabilities \n"
printf "20.Atlassian Jira Server Email Template Injection to RCE Vulnerabilities (JRASERVER-73067,JRASERVER-73072) and\n  Atlassian Jira Server Improper Authentication Vulnerability (JRASERVER-72801) and\n Atlassian Jira Server Insecure Direct Object References (IDOR) Vulnerability (JRASERVER-72813) and\n Atlassian Jira Server Private Project Names Enumeration Vulnerability (JRASERVER-72915) and\n Atlassian Jira Server Private Project Names Enumeration Vulnerability (JRASERVER-72916)"
printf "21.Cisco IOS and IOS XE Software SNMP Remote Code Execution Vulnerabilities (cisco-sa-20170629-snmp)\n"
printf "22.Threat Intel recon"


read -p $'\n\e[1;92m[\e[0m\e[1;77m*\e[0m\e[1;92m] Choose an option: \e[0m\en' option
if [[ $option == 1 ]]; then
printf "\n Microsoft IIS iisadmpwd Web Directory Present Vulnerability"
mas
elif [[ $option == 2 ]]; then
printf "\nEOL/Obsolete Software: Nginx 1.16.x Detected\n"
mas
elif [[ $option == 3 ]]; then
printf "\nUnaothrized port detected\n"
unp
elif [[ $option == 4 ]]; then
printf "\nCisco IOS and IOS XE Software Cluster Management Protocol Remote Code Execution Vulnerability (cisco-sa-20170317-cmp)\nIf port is found closed then only consider as VFP\n"
ciso
elif [[ $option == 5 ]]; then
printf "\n4.SSL v3 / TLS 1.0/1.1 is enabled or To check vulnerable Ciphers.\n"
ssl
elif [[ $option == 6 ]]; then
printf "6.NTP information leakage\n"
ntp
elif [[ $option == 7 ]]; then
printf "\n7.Untrusted SSL Certificate\n"
sslcert
elif [[ $option == 8 ]]; then
printf "\n8.Options Method enabled\n"
op
elif [[ $option == 9 ]]; then
printf "\n9.TRACE Method enabled\n"
TR
elif [[ $option == 10 ]]; then
printf "\n10.Depreciated SSH Ciphers\n"
DSC
elif [[ $option == 11 ]]; then
printf "\n11.EOL/Obsolete Software: jQuery 1.x and 2.x Detected"
java
elif [[ $option == 12 ]]; then
printf"\n12.Birthday attacks against TLS ciphers with 64bit block size vulnerability (Sweet32)"
ss
elif [[ $option == 13 ]]; then
printf"\n13.SSL Server Supports Weak Encryption Vulnerability"
ssl
elif [[ $option == 14 ]]; then
printf "\n14.Network Time Protocol Multiple Security Vulnerabilities (ntp-4.2.8p14)"
ntp
elif [[ $option == 15 ]]; then
printf "\n15.Atlassian Jira Server Private Project Names Enumeration Vulnerability (JRASERVER-72915)&(JRASERVER-72916)"
jira
elif [[ $option == 16 ]]; then
printf "16.ISC BIND Assertion Failure Vulnerability\n"
ISC
elif [[ $option == 17 ]]; then
printf "17.ISC BIND Buffer Overflow Vulnerability\n"
ISC
elif [[ $option == 18 ]]; then
printf "18.ISC BIND NXNSAttack Vulnerability\n"
ISC
elif [[ $option == 20 ]]; then
printf "\n16.Atlassian Jira Server Email Template Injection to RCE Vulnerabilities (JRASERVER-73067,JRASERVER-73072)"
jira
elif [[ $option == 21 ]]; then
printf "\n16.Cisco IOS and IOS XE Software SNMP Remote Code Execution Vulnerabilities (cisco-sa-20170629-snmp)
"
snmp
else
printf "\e[1;93m [!] Invalid option!\e[0m\n"
menu
fi
